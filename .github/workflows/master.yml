name: Master Branch Workflow

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

env:
  DOCKER_REGISTRY: docker.pkg.github.com
  DOCKER_IMAGE: docker.pkg.github.com/jasekirby/ghat/ghat
  DOCKER_IMAGE_LATEST: docker.pkg.github.com/jasekirby/ghat/ghat:latest
  DOCKER_IMAGE_SHA: docker.pkg.github.com/jasekirby/ghat/ghat:${{ github.sha }}

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:

    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: build docker image
      run: |
        docker build -t $DOCKER_IMAGE_SHA .

    - name: set version
      id: set_version
      run: |
        VERSION=v$(cat VERSION)
        echo "::set-env name=VERSION::$VERSION"
        echo "::set-output name=version::$VERSION"

    - name: add workspace bin to path
      run: |
        mkdir -p $GITHUB_WORKSPACE/bin
        echo "::add-path::$GITHUB_WORKSPACE/bin"
        echo "::add-path::$RUNNER_WORKSPACE/$(basename $GITHUB_REPOSITORY)/bin"

    - name: establish cache for binary dependencies
      uses: actions/cache@v1
      id: cache_bins
      with:
        path: ${{ github.workspace }}/bin
        key: ${{ runner.os }}-bin-${{ hashFiles('deps.sh') }}

    - name: gather dependencies
      if: steps.cache_bins.outputs.cache-hit != 'true'
      run: ./deps.sh

    - name: print tool versions
      run: |
        terraform -version
        terragrunt -v
        kops version

    - name: create release
      id: create_release
      if: github.event_name == 'push'
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.set_version.outputs.version }}
        release_name: ${{ steps.set_version.outputs.version }}

    - name: upload version file release asset
      id: upload_release_asset
      if: github.event_name == 'push'
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: VERSION
        asset_name: VERSION
        asset_content_type: text/plain

    - name: tag and publish docker image
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        docker login -u publisher -p $GITHUB_TOKEN $DOCKER_REGISTRY
        DOCKER_IMAGE_VERSION=$DOCKER_IMAGE:$VERSION
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_VERSION
        docker push $DOCKER_IMAGE_VERSION
        docker tag $DOCKER_IMAGE_SHA $DOCKER_IMAGE_LATEST
        docker push $DOCKER_IMAGE_LATEST
